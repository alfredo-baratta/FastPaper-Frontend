import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import Editor from "../components/editor";
import Input from "../components/input";
import Router from "next/router";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import cookie from "cookie";
import { v4 as uuidv4 } from "uuid";

const Home: NextPage = (props: any) => {
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState("");
  const [content, setContent] = useState("");
  const [disabled, setDisabled] = useState(false);

  useEffect(() => {
    if (
      localStorage.getItem("title") &&
      localStorage.getItem("author") &&
      localStorage.getItem("content")
    ) {
      setTitle(localStorage.getItem("title")!);
      setAuthor(localStorage.getItem("author")!);
      setContent(localStorage.getItem("content")!);
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("title", title);
    localStorage.setItem("author", author);
    localStorage.setItem("content", content);
  }, [title, author, content]);

  const post = async () => {
    setDisabled(true);
    if (!title.trim() || !author.trim() || !content.trim()) {
      toast.info("Empty params", {
        position: "bottom-center",
        autoClose: 2500,
        hideProgressBar: true,
        closeOnClick: true,
        draggable: false,
        progress: undefined,
      });
      setDisabled(false);
    } else {
      try {
        const req = await fetch(process.env.NEXT_PUBLIC_HOST + "/new", {
          method: "POST",
          headers: {
            "Content-type": "application/json",
            Authorization: "Bearer " + props.cookie.session,
          },
          body: JSON.stringify({
            title: title,
            author: author,
            content: content,
          }),
        });
        const res = await req.json();
        if (!req.ok) {
          toast.info("Maybe the server is offline. Try again later.", {
            position: "bottom-center",
            autoClose: 2500,
            hideProgressBar: true,
            closeOnClick: true,
            draggable: false,
            progress: undefined,
          });
          setDisabled(false);
        } else {
          if (res.success) {
            localStorage.clear();
            Router.push("/" + res.message);
          } else {
            toast.error(res.message, {
              position: "bottom-center",
              autoClose: 2500,
              hideProgressBar: true,
              closeOnClick: true,
              draggable: false,
              progress: undefined,
            });
            setDisabled(false);
          }
        }
      } catch (err: any) {
        toast.error(err.message, {
          position: "bottom-center",
          autoClose: 2500,
          hideProgressBar: true,
          closeOnClick: true,
          draggable: false,
          progress: undefined,
        });
        setDisabled(false);
      }
    }
  };

  return (
    <div className="flex flex-col items-center min-h-screen justify-center">
      <Head>
        <title>FastPaper</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col w-4/5 h-auto sm:w-3/5 md:w-3/6">
        <Input
          placeholder="Title"
          className="mt-4 outline-none w-full my-2 text-2xl font-bold focus:border-b-2"
          value={title}
          onChange={(e: any) => setTitle(e.target.value)}
          maxLength="200"
        ></Input>
        <Input
          placeholder="Author"
          className="mt-4 outline-none w-1/2 my-2 text-lg focus:border-b-2"
          value={author}
          onChange={(e: any) => setAuthor(e.target.value)}
          maxLength="35"
        ></Input>
        <Editor value={content} onChange={setContent}></Editor>
        <button
          className="w-56 mt-28 text-lg font-bold bg-blue-600 p-3 self-center rounded text-white hover:shadow-lg"
          onClick={() => post()}
          disabled={disabled}
        >
          PUBLISH
        </button>
      </div>
      <ToastContainer />
    </div>
  );
};

export const getServerSideProps = async (context: any) => {
  if (!context.req.headers.cookie) {
    const unique_id = uuidv4();
    const session_cookie = cookie.serialize("session", unique_id);
    context.res.setHeader("Set-cookie", session_cookie, {
      httpOnly: true,
    });
    return { props: { cookie: { session: unique_id } } };
  }
  return {
    props: {
      cookie: cookie.parse(context.req.headers.cookie),
    },
  };
};

export default Home;
